# -*- coding: utf-8 -*-
"""InitialDataGraphs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1plQ4DmfgtcRKIoLakYqxxV1BmjgVNih2

Import libraries to work with
"""

# Basic imports
import matplotlib.pyplot as plt
import pandas as pd

# Specific Imports
from matplotlib.ticker import FixedLocator
from matplotlib.ticker import FixedFormatter

"""Import the data"""

# Initialize dataset from file
dataset = pd.read_csv('combinedData.csv')

# Verify the import worked
print(dataset.head())

# Verify the update
print(dataset.shape)

"""Break the data up into usable sets"""

# Setup the House cost variable
house_cost = dataset.iloc[0]

# Setup the Interest Rate variable
interst_rate = dataset.iloc[1]

# Setup Canada Price Index for shelter variable
cpi = dataset.iloc[2]

# Check the new variables
print(
    f"House Cost: \n{house_cost[0:4]}\n"
    f"Interest Rate: \n{interst_rate[0:4]}\n"
    f"CPI: \n{cpi[0:4]}\n"
    )

"""Append variables to dictionary for iterability"""

# Initialize new list for variable data
data_vars = [house_cost, interst_rate, cpi]

# Setup a list of the titles of the data sets
titles = ['House Cost', 'Interest Rate', 'CPI']
info = ['201612=100', 'Percent', '2002=100']

# Couple the titles and info with the data sets
data_list = list(zip(
    titles,
    info,
    [data_vars[item] for item in range(len(titles))]
    ))

# Verify the coupling worked
print(data_list)

"""Start plotting some Graphs to identify trends"""

# Start a for loop to make graphs for all the sets in the dictonary
for title, info, data in data_list:
  # Make a new Figure
  fig = plt.figure()

  # Add a plot to the figure
  plot = fig.add_subplot(1, 1, 1)

  # plot the data to the graph
  data_ticks = data.index.tolist()
  plot.plot(data_ticks, data)

  # Add Dynamic Labels and Legend
  plot.set_title(f'{title} from 2008 to 2023')
  plot.legend([f'{info}'])

  # X Labels and ticks
  # Space out the X ticks for readability
  spaced_ticks = [
      data_ticks[0],
      data_ticks[31],
      data_ticks[63],
      data_ticks[95],
      data_ticks[127],
      data_ticks[159],
      data_ticks[191]
      ]

  plot.set_xticks(spaced_ticks)
  plot.set_xticklabels(spaced_ticks, rotation=45)
  plot.set_xlabel('Months/Years')

  # y Labels
  plot.set_ylabel(f'{title}')

  # Adjust layout for better appearance
  fig.tight_layout()

  # Save the plot to a dynamic SVG file
  plt.savefig(f'{title}.svg', format='svg', bbox_inches='tight')

  # Display plot to user
  plt.show()